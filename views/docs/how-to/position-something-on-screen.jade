.ch-g1.section
	h1 Docs
	.ch-g1-4
		!=partial('partials/howtos')
		!=partial('partials/demos')

	.ch-g3-4
		h1 How to position something on screen?
		p.container
			| This guide was written to explain how to position and relocate an element on screen.

		a#behind-the-magic
		h2 Behind the magic.
		div.container
			p
				| To perform this task we need to use
				a(href='/docs/demos/positioner') Positioner 
				| component. The role of this component is to position any element relative to any context.
			p
				| Read more about 
				a(href='/docs/demos/positioner') Positioner
				| .
			
		a#step-by-step
		h2 Positioning, step by step.
		div.container
			p
				| On this example we’ll position a 
				strong red div element
				| relative to other 
				strong blue div element 
				| which we’ll call 
				strong context
				| .
			.context.c1
				| Context
			.target.e1
				| Element
			p
				| The code snippet that we use is as follow:
			pre.code
				| <div class="context"></div>
				| <div class="element"></div>
			p
				| And we’re going to shape this with some CSS styles:
			pre.code
				| .context {
				|     width: 100px;
				|     height: 100px;
				|     border: 1px solid blue;
				| }
				| 		
				| .element {
				|     width: 25px;
				|     height: 25px;
				|     background-color: red;
				| }
			p
				| First, we’ll create an object that will contain the properties that the component needs 
				| to do the magic.
			pre.code
				| var configuration = {};
			p
				| Each position that we want to create, can receive some parameters. Then we have to specify 
				| all required parameters, such as 
				code element
				|. So, we’ll assign the 
				strong red element 
				| (as a query string of the CSS selector) to the 
				code element
				|  parameter.
			pre.code
				| configuration.element = $(“.element”);
			p
				| Then, we’ll specify the 
				strong context 
				| from which the 
				strong red element 
				| will take reference to positionate itself.
			pre.code
				| configuration.context = $(“.context”);
			p
				| Finally, we must specify which position will be the connector between 
				strong context 
				| and 
				strong element
				| . This is specified through the 
				code points
				|  parameter. In this example, we need to position the 
				strong red element’s 
				| left-top corner relative to the 
				strong context’s (blue element) 
				| right-top corner.
			pre.code
				| configuration.points = “lt rt”;
			p
				| Once we create the configuration object, we invoke the 
				strong Positioner component
				| .
			pre.code
				| var example = ch.positioner(configuration);
			p
				| The simplest way to do the same is specifying the configuration object in 
				abbr(title='JavaScript Object Notation') JSON 
				| format at same time as the component is invoked.
			pre.code
				| var example = ch.positioner({
				|     element: $(“.element”),
				|     context: $(“.context”),
				|     points: “lt rt”
				| });
			p
				| After the component is instantiated and the 
				strong element 
				| is positioned on screen, it returns a public method that allows to control the position. 
				| This method is called 
				code position()
				|  and can be used for 3 purposes:
			ol
				li
					| Get the current position configuration as 
					abbr(title='JavaScript Object Notation') JSON
					| .
				li
					| Update the 
					strong element 
					| and 
					strong context 
					| position, and redraw.
				li
					| Set a new position by resetting the specified parameters of configuration object.
			p
				| Read more about 
				a(href='/docs/demos/positioner') Positioner
				| .
				
		a#relocating
		h2 Relocating
		div.container
			p
				| To change 
				code points
				|  of the current position, we can use the public method 
				code position()
				| , specifying a new configuration object that contains a new 
				code points
				|  reference.
				
			pre.code
				| example({
				|     points: “lt lb”
				| });
			p
				| Final result should be seen like this:
			.context.c2
				| Context
			.target.e2
				| Element
		hr
		.ch-g1-2
			a(id='keep-on-reading')
			h2 Keep on reading
			p.container
				| Read more on our technical documentation, see the 
				a(href='/api/#{latest.version}/index.html') class index
				| , or see more about positioner in the 
				a(href="/api/#{latest.version}/symbols/ch.Positioner.html") Positioner
				|  documentation.
		.ch-g1-2
			a(id='report-a-problem')
			h2 Problems?
			p.container
				| You can easily report problems, like bugs or typos through our 
				a(href='#{common.issuetracker}') issue tracker
				| , or simply write a twitt to 
				a(href='http://twitter.com/#!/chicoui') @chicoui
				| .
.clearfix

//- First example initialization
- script('var example1 = ch.positioner({element: $(".e1"),context: $(".c1"),points: "lt rt"});')

//- For correct behavior on this how-to
- script('example1("refresh");')

//- Second example initialization
- script('var example2 = ch.positioner({element: $(".e2"),context: $(".c2"),points: "lt rt"});')

//- Relocating second example
- script('example2({points: "lt lb"});')