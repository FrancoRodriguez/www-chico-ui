
.ch-g1.section

	.ch-g1-4
		h3 How-to...
		ul.container
			- each item in howtos 
				li
					a(href='#{item.href}') #{item.label}
		h3 Demos
		ul.container
			- each item in demos
				li
					a(href='#{item.href}') #{item.label}

	.ch-g3-4
		h1 How to validate two fields like one?
		p.container
			| This guide was written to explain how to make a validation over two fields of a form, unifying behaviors and error messages.

		a#when-to-use-it
		h2 When to use it?
		div.container
			p
				| Use this tutorial when you needs to validate telephone, price or any multiple input.
			p
				| Feel free to modify the code of this how-to tutorial for more than two fields validations!!
		
		a#behind-the-magic
		h2 Behind the magic.
		div.container
			p
				| To perform this tutorial we need to use a Custom validation component. Then, you have to add a custom generated Watcher to the second field, because it will validate the value of first field, and will trigger the Helper (error message).
			
		a#step-by-step
		h2 Step by step.
		div.container
			p
				| On this example we’ll see a telephone number validation, separated on phone code and phone number fields. Both fields values, should be validated as required and number.
			p
				| The code snippet that we use is as follow:
			pre.code
				| ...
				| <div class="field-box">
				|     <label class="required">
				|         <span>Telephone: <em>*</em></span>
				|         <input type="text" name="example-phone-code" id="example-phone-code" required="required">
				|         <input type="text" name="example-phone-number" id="example-phone-number" required="required">
				|     </label>
				| </div>
				| ...
			p
				| First, we have to create the custom validation function. This function is to notify the Watcher if our validation is successful or not, and it always receives the field value. In this case we'll receive the value from second field.
			pre.code
				| var phone_validation = function(value2) { };
			p
				| Then, inside our custom function we grab the other field, the first one.
			pre.code
				| var field1 = $("#example-phone-code");
			p
				| By taking the first field, we have to save it's value.
			pre.code
				| var value1 = field1.val();
			p
				| To ensure we have both values, we check that variables aren't undefined, and we check that both fields are numbers. Here you can use any conditional or regular expression.
			p
				| When condition is true, we remove error class of first field and return true for notify to Custom Watcher that it's all ok. Second field error is triggered by it's Watcher.
			pre.code
				| if (value1 && value2) {
				| 
				|     // Any conditional or regexp
				|     if (!isNaN(value1) && !isNaN(value2)) {
				| 
				|         // Remove error class of first field
				|         field.removeClass("error");
				| 
				|         // Validation is ok! Return true
				|         return true;
				|     }
				| }
			p
				| If condition is false means that an error exists, therefore we add the "error" class to the first field and return false for Watcher validation over second field.
			pre.code
				| field.addClass("error");
				| return false;
			p
				| Finally, add custom validation to second field to achieve a right-side positioned Helper, specifying an error message.
			pre.code
				| var crazy = $("#example-phone-number").custom(phone_validation, "Enter a valid phone number.");
			p
				| For Required validation of this fields, we can concatenate Watchers like this:
			pre.code
				| var crazy = $("#example-phone-number").custom( ... ).and().required("This is a required field");
					
		a#final-code
		h2 Final code
		div.container
			p
				| You can download this example from
				a(href='https://github.com/mercadolibre/Pandora/blob/master/DobleInputValidation/index.html') Pandora repository
				| .
				
			pre.code
				| // Creates a custom function that receives the second field value
				| var example_phone_validation = function(value2) {
				| 
				|     // Gets the first field
				|     var field1 = $("#example-phone-code");
				| 
				|     // Saves the first field value
				|     var value1 = field1.val();
				| 
				|     // If both values are defined
				|     if (value1 && value2) {
				| 
				|         // Checks if both are numbers (Any conditional or regexp)
				|         if (!isNaN(value1) && !isNaN(value2)) {
				| 
				|             // Removes error class of first field
				|             field.removeClass("error");
				| 
				|             // Validation is ok! Returns true
				|             return true;
				|         }
				|     }
				| 
				|     // Here validation is false. Add error class to first field
				|     field.addClass("error");
				| 
				|     // Returns false for second field error
				|     return false;
				| 
				| };
				| 
				| // Creates custom + required validation over second field
				| var crazy = $("#example-phone-number")
				|                    .custom(phone_validation, "Enter a valid phone number.")
				|                    .and()
				|                    .required("This is a required field");
		hr
		.ch-g1-2
			a(id='keep-on-reading')
			h2 Keep on reading
			p.container
				| Read more on our technical documentation, see the 
				a(href='/api/index.html') class index
				| , or see more about modals in the 
				a(href="/api/symbols/ch.Watcher.html") Watcher
				|  documentation.
		.ch-g1-2
			a(id='report-a-problem')
			h2 Problems?
			p.container
				| You can easily report problems, like bugs or typos through our 
				a(href='/api/index.html') issue tracker
				| , or simply write a twitt to 
				a(href='http://twitter.com/#!/chicoui') @chicoui
				| .

				
.clearfix