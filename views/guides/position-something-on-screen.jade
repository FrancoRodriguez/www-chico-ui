h1 Position something on screen
p.updated
	| Documentation updated on 
	data November 12nd
	| .

.contents
	h5 Contents
	dl
		dt
			a(href="#behind-the-magic") 1 Behind the magic
		dt
			a(href="#step-by-step") 2 Positioning, step by step
		dd
			dl
				dt
					a(href="#step1") 2.1 Step 1: Set the HTML and CSS structure
				dt
					a(href="#step2") 2.2 Step 2: Create a configuration object
				dt
					a(href="#step3") 2.3 Step 3: Instance the Positioner component
				dt
					a(href="#step4") 2.4 Step 4: Understanding the control object returned by component
		dt
			a(href="#relocating") 3 Relocating

h3#behind-the-magic Behind the magic
p
	| To perform this task we need to use the 
	a(href="/widgets/positioner") Positioner 
	|  component. The role of this component is to position any element relative to any context.

h3#step-by-step Positioning, step by step
h4#step1 Step 1: Set the HTML and CSS structure
p
	| On this example we’ll position a 
	strong red div element
	| relative to other 
	strong blue div element 
	| which we’ll call 
	strong context
	| .
.context.c1
	| Context
.target.e1
	| Element
p
	| The code snippet that we use is as follow:
pre
	| <div class="context"></div>
	| <div class="element"></div>
p
	| And we’re going to shape this with some CSS styles:
pre
	| .context {
	| 	width: 100px;
	| 	height: 100px;
	| 	border: 1px solid blue;
	| }
	| 
	| .element {
	| 	width: 25px;
	| 	height: 25px;
	| 	background-color: red;
	| }

h4#step2 Step 2: Create a configuration object
p
	| First, we’ll create an object that will contain the properties that the component needs to do the magic.
pre
	| var configuration = {};
p
	| Each position that we want to create, can receive some parameters. Then we have to specify all required parameters, such as 
	code element
	|. So, we’ll assign the 
	strong red element 
	| (as a query string of the CSS selector) to the 
	code element
	|  parameter.
pre
	| configuration.element = ".element";
p
	| Then, we’ll specify the 
	strong context 
	| from which the 
	strong red element 
	| will take reference to positionate itself.
pre
	| configuration.context = ".context";
p
	| Finally, we must specify which position will be the connector between 
	strong context 
	| and 
	strong element
	| . This is specified through the 
	code points
	|  parameter. In this example, we need to position the 
	strong red element’s 
	| left-top corner relative to the 
	strong context’s (blue element) 
	| right-top corner.
pre
	| configuration.points = "lt rt";

h4#step3 Step 3: Instance the Positioner component
p
	| Once we create the configuration object, we invoke the 
	strong Positioner component
	| .
pre
	| var example = ch.Positioner(configuration);
p
	| The simplest way to do the same is specifying the configuration object in 
	abbr(title="JavaScript Object Notation") JSON 
	| format at same time as the component is invoked.
pre
	| var example = ch.Positioner({
	| 	element: ".element",
	| 	context: ".context",
	| 	points: "lt rt"
	| });
h4#step4 Step 4: Understanding the control object returned by component
p
	| After the component is instantiated and the 
	strong element 
	| is positioned on screen, it returns a public method that allows to control the position. This method is called 
	code position
	|  and can be used for 3 purposes:
ul.ch-list
	li
		| Get the current position configuration as 
		abbr(title="JavaScript Object Notation") JSON
		| .
	li
		| Update the 
		strong element 
		| and 
		strong context 
		| position, and redraw.
	li
		| Set a new position by resetting the specified parameters of configuration object.

h3#relocating Relocating
p
	| To change 
	code points
	|  of the current position, we can use the public method 
	code position
	| , specifying a new configuration object that contains a new 
	code points
	|  reference.

pre
	| example({
	| 	"points": "lt lb"
	| });
p
	| Final result should be seen like this:
.context.c2
	| Context
.target.e2
	| Element



//- First example initialization
- script("code", 'var example1 = ch.Positioner({element: $(".e1"),context: $(".c1"),points: "lt rt"});')

//- For correct behavior on this guide
- script("code", 'example1("refresh");')

//- Second example initialization
- script("code", 'var example2 = ch.Positioner({element: $(".e2"),context: $(".c2"),points: "lt rt"});')

//- Relocating second example
- script("code", 'example2({points: "lt lb"});')