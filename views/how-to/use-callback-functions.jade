.ch-g1.section
	h1 Docs
	.ch-g1-4
		!=partial('partials/howtos')
		!=partial('partials/demos')

	.ch-g3-4
		h1 How to use callbacks functions?
		p.container
			| In this tutorial, we'll learn how to use 
			a(href='http://en.wikipedia.org/wiki/Callback_(computer_programming)', title="Read more on Wikipedia.") callbacks
			|  to know when a component change into a different state.
			
		a#defining-callbacks-functions
		h2 Defining callback functions
		p.container
			| Almost every component has different states, you can know when something happens through
			| callback functions. To assign a callback function simply pass the configuration
			| object as an argument to a component constructor. Let's see an example with 
			a(href='/docs/demos/modal') Modal
			| component:
		pre.code
			| var myModal = $("#my-modal").modal({
			| 	onShow: function() {
			|		// inside a callback function
			| 	}
			| });
		p.container
			| All the available callbacks are written down for each component on the
			a(href='/api/#{latest.version}/index.html') API Docs.
		
		a#the-scope-inside
		h2 The scope inside
		p.container
			| To make things easy, each callback has a special scope inside its function context, 
			| through the 
			code this
			|  keyword you can access to the component's instance to keep on working with it. 
			| Let's see an example:
		pre.code
			| var myModal = $("#my-modal").modal({
			| 	onShow: function() {
			| 		this.content("New content for 'this', the modal.")
			| 		    .widht(500)
			| 		    .heigth(300);
			| 	}
			| });
			
		a#complex-behaviors
		h2 Complex behaviors
		p.container
			| You can easily create more complex behaviors by combining a few components through 
			| callback functions.
		pre.code
			| // Create a empty modal
			| var myModal = $("#my-modal").modal();
			| // Create a form controller and define a 'onSubmit' callback
			| var myForm = $("#my-form").form({
			| 	onSubmit:function() {
			|		// Change modal's content and show it
			|		myModal.content("<p>Are you sure?</p>").show();
			| 	}
			| });

		a#deferred-callbacks
		h2 Deferred callbacks
		p.container
			| Another useful pattern is to assign deferred handlers to callbacks. 
			| That way you could assign behavior to the components depending on user 
			| behavior or your app configuration. To accomplish that all 
			a(href='/api/#{latest.version}/symbols/ch.Object.html') Objects 
			| have a public method called 
			code on()
			| , that let you define deferred callbacks, and 
			| another method called 
			code off()
			| , to remove callbacks. 
		pre.code
			| // Create a Modal with some content
			| var myModal = $("#my-modal").modal("/some/content.html");
			| if (user.isLogged) {
			|	myModal.on("show", function(){
			|		// do something different for logged users
			|	});
			| }
		p.container
			| As you see in the previous example, the use of the method 
			code on()
			|  to assign
			| special behavior to logged users with a cool and simple sugar syntax.
		hr
		.ch-g1-2
			a#keep-on-reading
			h2 Keep on reading
			p.container
				| Read more on our technical documentation, see the 
				a(href='/api/#{latest.version}/index.html') class index
				| , or see more about 
				code on()
				|  and
				code off()
				|  methods in the 
				a(href='/api/#{latest.version}/symbols/ch.Object.html#!methods') Object
				|  documentation.
		.ch-g1-2
			a#report-a-problem
			h2 Problems?
			p.container
				| You can easily report problems, like bugs or typos through our 
				a(href='#{common.issuetracker}') issue tracker
				| , or simply write a twitt to 
				a(href='http://twitter.com/#!/chicoui') @chicoui
				| .

.clearfix